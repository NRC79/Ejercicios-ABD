---
title: "Tema 3: Ejercicios"
format:
  html:
    code-copy:       true
    code-tools:      true
    embed-resources: true
    theme:           ../www/extra-styles.scss
    toc:             true
    toc-location:    left
callout-appearance: minimal
---

# Introducción

En este hemos visto los fundamentos del modelado Bayesiano, y vamos a aplicarlos desde un punto de vista teórico en los ejercicios a continuación.

En primer lugar, configuramos el entorno para ejecutar el código.

```{r setup}
#| message: false

# Paquetes:
library(tidyverse)
library(RColorBrewer)


# Configuración de la salida gráfica:

PALETA <- brewer.pal(8, "Set2") # Colores por defecto
color_defecto  <- PALETA[1]
options(ggplot2.discrete.colour = PALETA)

theme_set(theme_bw()) # Tema "neutro" para la representación gráfica
```

Verás que solamente necesitamos el paquete {tidyverse}, para manipular datos, y configurar la salida gráfica (el paquete {RColorBrewer} sólo se utiliza para obtener una paleta de colores agradable y accesible para personas con ceguera al color).
No hace falta ningún paquete para análisis y modelado Bayesiano, ya que los modelos que vamos a estimar se basan en las propiedades analíticas de las *distribuciones conjugadas*.

# Ejercicio 1

## Distribución uniforme

A continuación se muestra el código en R para representar la distribución uniforme $x \sim U(0, 1)$:

```{r ejemplo-uniforme}
PREC     <- 1e-3 # Precisión para representar la función de densidad (milésimas)
DENS_INF <- 0    # Rango inferior de la función de densidad
DENS_SUP <- 1    # Rango superior de la función de densidad

uniforme <- tibble( # Esta función crea un "data.frame" o tabla de datos
  variable = seq(from = DENS_INF, to = DENS_SUP, by = PREC),
  densidad = variable |> dunif(min = DENS_INF, max = DENS_SUP)
)

uniforme |> glimpse() # Muestra el objeto con los datos, contiene 2 columnas 

uniforme |> # Usando la tabla de datos antes creada, crea un objeto gráfico
  ggplot(mapping = aes(x = variable, y = densidad)) + # "Mapea" columnas a
                                                      #   coordenadas
  geom_line(color = color_defecto) + # Representa mediante una línea continua
  
  ylim( # Fija el límite inferior a 0 para mostrar el eje y completo:
    0,  # (Usa la propia distribución para establecer el límite superior)
    uniforme |> pull(densidad) |> max()
  )
```

## Distribución normal

Aplicando un código similar, se puede representar una distribución normal estandarizada $x \sim N(0, 1)$:

```{r ejemplo-normal}
DENS_INF <- -4 # Usamos un rango más adecuado para la normal estandarizada
DENS_SUP <-  4

normal <- tibble( # Reutilizamos `PREC` del "chunk" de código anterior
  variable = seq(from = DENS_INF, to = DENS_SUP, by = PREC),
  densidad = variable |> dnorm()
)

# Al cubrir la distribución el rango desde 0 hasta el máximo, en este caso no
#   es necesario establecer los límites manualmente
normal |>
  ggplot(mapping = aes(x = variable, y = densidad)) +
  geom_line(color = color_defecto)
```

Como puedes ver, los límites se establecen automáticamente para cubrir todo el rango de la distribución (no hace falta fijarlos).
Al haber valores próximos a 0, tampoco es necesario establecer el límite inferior manualmente.

## Integración "numérica"

Haciendo uso de los valores generados de una distribución, podemos operar con ellos para obtener los resultados de "integrar" esa función, pero haciéndolo de forma numérica.

Al obtener "valores equiespaciados" de la distribución, lo que estamos obteniendo es una "rejilla" de valores.
La integración será una suma de "rectángulos", de altura igual a la densidad en ese punto, con base centrada en ese punto y extenciéndose `PREC/2` hacia cada lado (y por tanto de anchura `PREC`).

Utilizando esta "integral numérica", podemos obtener ciertos valores de la distribución.
Por ejemplo, la integral en todo el dominio de la variable debería tener un valor de 1.

```{r integral-uniforme}
uniforme |> summarize(integral = PREC * sum(densidad))
```

En el caso de la distribución uniforme, tenemos valores "centrados" en 0 y 1, por lo que los intervalos de los extremos se extienden hasta `-PREC/2` y `1 + PREC/2`.
Podríamos "restar medio valor" de la densidad en cada extremo para obtener una integral más precisa:

```{r}
uniforme |> summarize(
  integral = PREC * (sum(densidad) - 0.5 * (first(densidad) + last(densidad)))
)
```

En el caso de la distribución normal el cálculo de la integral se haría igual:

```{r integral-normal}
normal |> summarize(
  integral = sum(densidad) * PREC
)
```

En este caso, el dominio es infinito, pero nos hemos restringido al rango $[`{r} DENS_INF`, `{r} DENS_SUP`]$.
Por lo tanto, estamos desechando la parte de la distribución que está en las "colas".
También, cuanto mayor sea la precisión, más se acercará la aproximación mediante "rectángulos" a la curva real.

```{r integral-normal-mas-precisa}
tibble( # Ampliando el rango a [-10, 10]:
  variable = seq(from = -10, to = 10, by = PREC),
  densidad = variable |> dnorm()
) |>
  summarize(integral = sum(densidad) * PREC)

tibble( # Usando precisión de "millonésimas":
  variable = seq(from = DENS_INF, to = DENS_SUP, by = 1e-6),
  densidad = variable |> dnorm()
) |>
  summarize(integral = sum(densidad) * 1e-6) # Misma precisión en la integral
```

En general, las aproximaciones iniciales pueden ser válidas.
Si lo necesitamos, podemos "normalizar" por la integral.
Los siguiente ejemplos, triviales, pueden ayudarnos más adelante:

```{r integral-normalizada}
uniforme |> summarize(
  integral = PREC * sum(densidad),
  integral = integral / integral # Normalización
)

normal |> summarize(
  integral = PREC * sum(densidad),
  integral = integral / integral # Normalización
)
```

## Práctica

Calcula o comprueba las siguientes respuestas usando comandos de R:

### Pregunta 1

-   ¿Cuál es el valor máximo de la función de densidad de la distribución normal?

::: {#respuesta-1 .callout-note}
```{r normal-estandarizada}
x <- seq(-4, 4) # rango de valores para evaluar
pdf_values <- dnorm(x) # valores de la PDF
max_pdf <- max(pdf_values) # valor máximo de la PDF
max_pdf
```
```{r uniforme}
a <- 0  # Límite inferior
b <- 1  # Límite superior

max_pdf <- 1 / (b - a) # Valor máximo
max_pdf
```
:::

### Pregunta 2

-   ¿Para qué valor de la variable aleatoria se da? ¿Cómo llamarías a ese valor?

::: {#respuesta-2 .callout-note}
 Este máximo se dará en la media, en el caso de la distribución normal estandarizada el valor x=0
 
 En una distribución uniforme todos los valores dentro del intervalo presentan la misma densidad
:::

### Pregunta 3

-   El valor máximo, ¿puede ser mayor que 1? Justifica tu respuesta.

::: {#respuesta-3 .callout-note}
En términos generales no, pues el valor del área que queda por debajo de curva siempre debe ser 1. No obstante, en una función uniforme con un intervalo mayor que 0 y menor que 1 se pueden obtener valores máximos superiores a 1.  
:::

### Pregunta 4

-   Calcula la función de distribución de la variable normal **a partir de los valores de la función de densidad obtenidos previamente**, y represéntala.

*(Ejecuta `?cumsum` para consultar la ayuda de esa función).*

::: {#respuesta-4 .callout-note}
```{r función distribución variable normal}
x <- seq(-4, 4)

# Calcular la función de distribución acumulativa
cdf_values <- pnorm(x)

# Representación gráfica de la CDF
plot(x, cdf_values, type = "l", col = "red", lwd = 2,
     xlab = "Valores de la variable",
     ylab = "Probabilidad acumulada",
     main = "Distribución acumulativa (CDF) de una normal estándar")
```

:::

### Pregunta 5

-   Calcula el valor esperado de la distribución normal.

::: {#respuesta-5 .callout-note}
El valor esperado de la distribuciónnormal es la media.
:::

# Ejercicio 2

## Distribución Beta

### Pregunta 6

-   Representa una distribución Beta con parámetros $\alpha$ = $\beta$ = 1, $Beta(1, 1)$. Ajusta los ejes correctamente, si hace falta, como en la distribución uniforme.

*(Si no sabes qué limites utilizar, consulta la ayuda de `dbeta()`).*

::: {#respuesta-6 .callout-note}
```{r distribución Beta}
x <- seq(0, 1)# Definir rango valores para x

pdf_values <- dbeta(x, shape1 = 1, shape2 = 1)#densidad distribución Beta(1, 1)

# Representar la distribución Beta(1, 1)
plot(x, pdf_values, type = "l", col = "blue", lwd = 2,
     xlab = "Valores de x", ylab = "Densidad",
     main = "Función de densidad de Beta(1, 1)",
     ylim = c(0, 1)) 

```

:::

### Pregunta 7

-   ¿Qué forma tiene?

::: {#respuesta-7 .callout-note}
Tiene una forma de línea recta con un valor de densidad uniforme para todo el intervalo.
:::

## Parámetros de la distribución Beta

### Pregunta 8

-   Prueba con diferentes valores de $\alpha$ y $\beta$.

::: {#respuesta-8 .callout-note}
```{r distribución beta distintos valores}
x <- seq(0, 1, length = 1000)

# Calcular y graficar varias distribuciones Beta
plot(x, dbeta(x, shape1 = 2, shape2 = 4), type = "l", col = "red", lwd = 2,
     xlab = "Valores de x", ylab = "Densidad",
     main = "Distribuciones Beta con diferentes parámetros")
lines(x, dbeta(x, shape1 = 4, shape2 = 2), col = "blue", lwd = 2) # Beta(4, 2)
lines(x, dbeta(x, shape1 = 1.1, shape2 = 1.1), col = "green", lwd = 2) # Beta(1.1, 1.1)
lines(x, dbeta(x, shape1 = 0.5, shape2 = 0.5), col = "yellow", lwd = 2) # Beta(0.5, 0.5)
lines(x, dbeta(x, shape1 = 4, shape2 = 4), col = "black", lwd = 2)# Beta(4, 4)
```

:::

### Pregunta 9

-   ¿Qué ocurre a medida que van creciendo?

::: {#respuesta-9 .callout-note}
Si son iguales, a medida que crecen la distribución va adquiriendo forma de campana y cuanto más crecen la campana se va haciendo más estrecha.Cuando aumenta beta los valores se concentran más próximos a x = 0, mientras que según crece alfa los valores se concentran más próximos a x = 1
:::

### Pregunta 10

-   ¿Qué ocurre cuando son iguales? ¿Y cuándo son distintos?

::: {#respuesta-10 .callout-note}
Cuando son iguales la distribución es simétrica y cuando son distintos las distribuciones son más asimétricas, tanto más cuanto mayor sea la diferencia de magnitud entre los parémetros.
:::

### Pregunta 11

-   ¿Qué ocurre si tienen valores ligeramente superiores a 1?

::: {#respuesta-11 .callout-note}
Con valores ligeramente superiores a 1 la distribución crece rápidamente desde x = 0 alcanzando casi la densidad máxima. Esta se alcanzaenx = 0,5 (si ambos alpha y beta son iguales). Lo diferencial es que en este caso ya no estamos ante una distribución uniforme.
:::

### Pregunta 12

-   ¿Qué ocurre si tienen valores por debajo de 1?

::: {#respuesta-12 .callout-note}
La función adquiere forma de U, dándose la mayor densidad en los valores extremos de x. Los valores medios de x en este caso tienen una probabilidad menor.
:::

# Ejercicio 3

*(NOTA: Para todas las distribuciones, utiliza el valor de `PREC` definido en el ejercicio 1.)*

## Modelo beta-binomial

En el departamento de investigación de mercado de tu empresa quieren saber la tasa de aceptación de la nueva app que quieren lanzar.
Para ello, han probado la app con una muestra (asume m.a.s.) de $n$ potenciales usuarios/as, y se les ha pedido que indiquen si descargarían o no la app.

El jefe del departamento de analítica te asigna al proyecto y te pide que ajustes un modelo beta-binomial "no informativo" para responder a la pregunta de investigación.

### Pregunta 13

-   ¿Cómo se representa la "tasa de aceptación" en el modelo?

::: {#respuesta-13 .callout-note}
Se representa con una distribución binomial condicionada a theta
$𝑋∣𝜃∼Binomial(𝑛,𝜃)$

:::

### Pregunta 14

-   ¿Qué distribución previa utilizarías para esa tasa de aceptación? Formúlala y represéntala gráficamente.

*(Ajusta los ejes correctamente, si hace falta, como en la distribución uniforme).*

::: {#respuesta-14 .callout-note}
COmo distribución previa, emplearía una distribución Beta (1,1), puesto que al ser uniforme no es informativa. Lo único que nos dice es que en el intervalo dado, todos los valores tienen la misma probabilidad.
$𝜃∼ Beta(1,1)$
```{r distribucion Beta}
alpha <- 1
beta <- 1
theta <- seq(0, 1)
density <- dbeta(theta, alpha, beta)
plot(theta, density, type = "l", col = "blue", lwd = 2,
     main = "Distribución Previa Beta(1, 1)",
     xlab = "Tasa de aceptación (θ)", ylab = "Densidad",
     ylim = c(0, 1))  
abline(h = 1, col = "red", lty = 2)

```

:::

### Pregunta 15

-   Supón que $y$ es el número de usuarios/as que han respondido que "Sí" descargarían la app. Formula la verosimilitud del modelo.

::: {#respuesta-15 .callout-note}
$P(y \mid n, p) = \binom{n}{y} p^y (1-p)^{n-y}$
:::

## Ajuste del modelo

-   El departamento de investigación de mercado te da acceso a los siguientes datos de la muestra:

```{r beta-binomial-muestra}
aceptacion_muestra <- tibble(
  id_participante   = 1:22,
  resp_descarga_app = c(
    "Si", "Si", "No", "No", "Si", "Si", "Si", "Si", "No", "Si", "Si",
    "Si", "Si", "Si", "Si", "Si", "No", "Si", "No", "Si", "Si", "Si"
  )
)
```

### Pregunta 16

-   Obtén, en base a estos datos, la distribución posterior de la tasa de aceptación (en forma analítica), y represéntala junto a la distribución previa.

::: {#respuesta-16 .callout-note}
```{r distribución posterior tasa aceptación}
# Calcular n (tamaño de la muestra) y y (número de "Sí")
n <- nrow(aceptacion_muestra)
y <- sum(aceptacion_muestra$resp_descarga_app == "Si")

# Parámetros del prior Beta(1, 1)
a <- 1
b <- 1
# Posterior Beta(a + y, b + n - y)
a_post <- a + y
b_post <- b + (n - y)

# Resultados
cat("Tamaño de la muestra (n):", n, "\n")
cat("Número de éxitos (y):", y, "\n")
cat("Posterior Beta(", a_post, ",", b_post, ")\n")

# Graficar la distribución posterior
p <- seq(0, 1, length.out = 1000)  # Valores de la tasa de aceptación
densidad <- dbeta(p, a_post, b_post)  # Densidad de la posterior

# Graficar usando ggplot2
library(ggplot2)
ggplot(data = data.frame(p, densidad), aes(x = p, y = densidad)) +
  geom_line(color = "blue", size = 1) +
  labs(title = paste("Distribución Posterior Beta(", a_post, ",", b_post, ")"),
       x = "Tasa de aceptación (p)",
       y = "Densidad de probabilidad") +
  theme_minimal()
```

:::

### Pregunta 17

-   Obtén por el método numérico el valor esperado y la moda de la distribución posterior. ¿Cómo los interpretarías?

*(Nota: Ten en cuenta la "precisión" al calcular el "peso" de cada muestra.)*

::: {#respuesta-17 .callout-note}
```{r valor esperado y moda}
# Calcular los valores esperados y la moda para la posterior Beta
valor_esperado <- a_post / (a_post + b_post)

if (a_post > 1 && b_post > 1) {
  moda <- (a_post - 1) / (a_post + b_post - 2)
} else {
  moda <- NA  # La moda no se encuentra en valores centrales si a_post o b_post <= 1
}

# Mostrar resultados
cat("Valor esperado (media):", valor_esperado, "\n")
cat("Moda:", ifelse(!is.na(moda), moda, "No definida debido a a_post <= 1 o b_post <= 1"), "\n")

```

:::

## Ajuste con una nueva muestra

-   El director de investigación de mercado no está totalmente seguro con los resultados, y pide a su departamento recoger una nueva muestra, mayor, para el estudio. Te dan acceso a los siguientes datos de la nueva muestra:

```{r beta-binomial-muestra2}
aceptacion_muestra_2 <- tibble(
  id_participante   = 1:113,
  resp_descarga_app = c(
    "Si", "Si", "No", "No", "Si", "Si", "Si", "Si", "No", "Si", "Si",
    "Si", "Si", "Si", "Si", "Si", "No", "Si", "No", "Si", "Si", "Si", 
    "No", "Si", "Si", "Si", "Si", "No", "No", "Si", "No", "Si", "Si", 
    "Si", "Si", "Si", "No", "Si", "No", "No", "Si", "No", "Si", "Si", 
    "No", "No", "No", "Si", "No", "No", "Si", "Si", "No", "No", "Si", 
    "No", "Si", "No", "No", "No", "Si", "Si", "No", "Si", "Si", "No", 
    "Si", "Si", "No", "Si", "Si", "No", "Si", "No", "Si", "No", "Si", 
    "No", "No", "No", "Si", "Si", "No", "No", "Si", "Si", "No", "No", 
    "No", "Si", "Si", "No", "Si", "Si", "No", "Si", "Si", "Si", "Si", 
    "No", "Si", "No", "No", "No", "No", "No", "Si", "No", "No", "Si", 
    "Si", "Si", "Si"
  )
)
```

### Pregunta 18

-   ¿Qué distribución previa utilizarías en esta ocasión? Formúlala.

::: {#respuesta-18 .callout-note}
Utilizaría la distribución posterior obtenida con la primera muestra de participantes 

$\text{Beta}(a_{\text{post}}, b_{\text{post}})$
:::

### Pregunta 19

-   Obtén la distribución posterior analítica después de esta segunda muestra, represéntala junto con las dos distribuciones anteriores, y obtén los estimadores posteriores esperado y modal usando el método numérico.

::: {#respuesta-19 .callout-note}
```{r distribución posterior muestra 2}
# Calcular n y y para la nueva muestra
n2 <- nrow(aceptacion_muestra_2)
y2 <- sum(aceptacion_muestra_2$resp_descarga_app == "Si")

# Prior Beta(1, 1)
a_prior <- 1
b_prior <- 1

# Posterior tras la primera muestra
n1 <- 22
y1 <- 17
a_post_1 <- a_prior + y1
b_post_1 <- b_prior + (n1 - y1)

# Posterior tras la segunda muestra
a_post_2 <- a_prior + y2
b_post_2 <- b_prior + (n2 - y2)

# Crear secuencia de probabilidades
p <- seq(0, 1, length.out = 1000)

# Calcular densidades de las distribuciones
densidad_prior <- dbeta(p, a_prior, b_prior)
densidad_post_1 <- dbeta(p, a_post_1, b_post_1)
densidad_post_2 <- dbeta(p, a_post_2, b_post_2)
# Crear tibble para graficar
data <- tibble(
  p = c(p, p, p),  # Concatenamos los valores de p tres veces
  densidad = c(densidad_prior, densidad_post_1, densidad_post_2),  # Concatenamos las densidades
  tipo = factor(c(
    rep("Prior", length(densidad_prior)),
    rep("Posterior 1", length(densidad_post_1)),
    rep("Posterior 2", length(densidad_post_2))
  ))  # Etiquetas ajustadas al tamaño exacto de las densidades
)

# Graficar las distribuciones
ggplot(data, aes(x = p, y = densidad, color = tipo)) +
  geom_line(size = 1) +
  labs(title = "Comparación de distribuciones Beta",
       x = "Tasa de aceptación (p)",
       y = "Densidad de probabilidad") +
  theme_minimal() +
  scale_color_manual(values = c("red", "blue", "green"))

# Calcular el valor esperado y la moda de la posterior tras la segunda muestra
valor_esperado_2 <- a_post_2 / (a_post_2 + b_post_2)
moda_2 <- if (a_post_2 > 1 && b_post_2 > 1) {
  (a_post_2 - 1) / (a_post_2 + b_post_2 - 2)
} else {
  NA
}
# Mostrar resultados
cat("Valor esperado posterior (segunda muestra):", valor_esperado_2, "\n")
cat("Moda posterior (segunda muestra):", ifelse(!is.na(moda_2), moda_2, "No definida debido a parámetros insuficientes"), "\n")

```

:::

## Ajuste con las muestras colapsadas

Supón que el director de investigación de mercado no estaba contento con la muestra inicial y pidió recoger más muestra antes de darte acceso a los datos.
Cuando recibes los datos, recibes las dos muestras colapsadas, sin saber qué participantes eran de la primera o de la segunda muestra:

```{r beta-binomial-muestra-total}
aceptacion_muestra_total <- bind_rows(
  aceptacion_muestra, aceptacion_muestra_2
) |>
  mutate(id_participante = row_number()) # Los ID están colapsados en una serie
```

### Pregunta 20

-   Obtén la distribución posterior analítica después de esta segunda muestra, represéntala junto con las distribuciones anteriores, y obtén los estimadores posteriores esperado y modal por el método numérico.

::: {#respuesta-20 .callout-note}
```{r distribución poserior muestra total}
# Datos consolidados
aceptacion_muestra_total <- bind_rows(
  aceptacion_muestra, aceptacion_muestra_2
) |>
  mutate(id_participante = row_number())

# Calcular tamaño total de la muestra y éxitos
n <- nrow(aceptacion_muestra_total)
y <- sum(aceptacion_muestra_total$resp_descarga_app == "Si")

# Prior Beta(1, 1)
a_prior <- 1
b_prior <- 1

# Posterior después de la primera muestra
n1 <- 22
y1 <- 17
a_post_1 <- a_prior + y1
b_post_1 <- b_prior + (n1 - y1)

# Posterior después de la muestra total
a_post_2 <- a_prior + y
b_post_2 <- b_prior + (n - y)
# Crear secuencia de probabilidades
p <- seq(0, 1, length.out = 1000)

# Calcular densidades
densidad_prior <- dbeta(p, a_prior, b_prior)
densidad_post_1 <- dbeta(p, a_post_1, b_post_1)
densidad_post_2 <- dbeta(p, a_post_2, b_post_2)
# Crear tibble para graficar
data <- tibble(
  p = c(p, p, p),  # Concatenamos los valores de p tres veces
  densidad = c(densidad_prior, densidad_post_1, densidad_post_2),  # Concatenamos las densidades
  tipo = factor(c(
    rep("Prior", length(densidad_prior)),
    rep("Posterior 1", length(densidad_post_1)),
    rep("Posterior 2", length(densidad_post_2))
  ))  # Etiquetas ajustadas al tamaño exacto de las densidades
)

# Graficar distribuciones
ggplot(data, aes(x = p, y = densidad, color = tipo)) +
  geom_line(size = 1) +
  labs(title = "Distribuciones Beta: Prior, Posterior 1 y Posterior 2",
       x = "Tasa de aceptación (p)",
       y = "Densidad de probabilidad") +
  theme_minimal() +
  scale_color_manual(values = c("red", "blue", "green"))
# Calcular valor esperado y moda para la posterior final
valor_esperado <- a_post_2 / (a_post_2 + b_post_2)
moda <- if (a_post_2 > 1 && b_post_2 > 1) {
  (a_post_2 - 1) / (a_post_2 + b_post_2 - 2)
} else {
  NA
}

# Mostrar resultados
cat("Valor esperado posterior combinado:", valor_esperado, "\n")
cat("Moda posterior combinada:", ifelse(!is.na(moda), moda, "No definida debido a parámetros insuficientes"), "\n")

```

:::

### Pregunta 21

-   ¿Qué concluyes de la respuesta anterior? ¿En qué se diferencia este enfoque del análisis de datos clásico o frecuentista?

::: {#respuesta-21 .callout-note}
En función de la información previa de que diponemos los resultados varían ligeramente. la densidad de probabilidad de la distribución posterior 2 aumenta. Así mismo también aumenta ligeramente el valor esperado posterior y la moda posterior. La principal diferencia respecto alenfoque frecuentista es que el enfoque bayesiano utiliza las informaciones previas a la vez que los datos observados. De este modo supne un enfoque algo más dinámico pues las actualizaciones de los datos observados se hacen en base a los datos obtenidos previamente. El enfoque frecuentista sería algo más estático, pues se centra en estimar los datos para una muestra determinada.
:::

# Ejercicio 4

*(NOTA: Para todas las distribuciones, utiliza el valor de `PREC` definido en el ejercicio 1.)*

En un proyecto de investigación educativo, el equipo investigador ha evaluado la rapidez de lectura en las dos clases de 1º de ESO de un colegio.
Los datos que te entregan consisten en el tiempo en segundos que tarda cada niño en leer un texto estandarizado.

Se quiere obtener un parámetro global promedio del tiempo de lectura para el alumnado de 1º de ESO en el colegio, para lo que te piden ajustar un modelo normal-normal.
Se pide usar como distribución previa la estimada de la población, que tiene media y varianza de 247 y 1156, respectivamente.

Los datos que te han facilitado son:

```{r normal-normal-muestras}
clase_1 <- tibble(
  id     = 1:27,
  tiempo = c(
    242, 249, 278, 273, 227, 257, 276, 236, 214, 141, 200, 201, 
    228, 271, 160, 275, 156, 246, 293, 306, 263, 247, 224, 160, 277, 
    168, 250
  )
)

clase_2 <- tibble(
  id     = 1:24,
  tiempo = c(
    195, 176, 237, 258, 226, 254, 292, 212, 215, 298, 235, 244, 
    144, 227, 166, 194, 261, 187, 224, 233, 180, 167, 193, 282
  )
)
```

## Modelo normal-normal

### Pregunta 22

-   Determina la verosimilitud y las distribuciones previa y posterior de la media, asumiendo que la varianza de la verosimilitud es la varianza de los datos. Justifica cómo has obtenido los parámetros de la distribución posterior (usa 2 decimales de precisión).

::: {#respuesta-22 .callout-note}
```{r Verosimilitud, dist previa y post}

# Unión de datos de ambas clases
datos <- c(clase_1$tiempo, clase_2$tiempo)

# Parámetros observados
n <- length(datos)
media_muestral <- mean(datos)  # Media muestral
varianza_muestral <- var(datos)  # Varianza muestral

# Parámetros de la distribución previa
mu_previa <- 247
var_previa <- 1156

# Cálculo de la distribución posterior
var_posterior <- 1 / (1 / var_previa + n / varianza_muestral)
mu_posterior <- var_posterior * (mu_previa / var_previa + n * media_muestral / varianza_muestral)

# Mostrar resultados con dos decimales de precisión
cat(sprintf("Media Posterior: %.2f\n", mu_posterior))
cat(sprintf("Varianza Posterior: %.2f\n", var_posterior))

```

:::

## Estimación

### Pregunta 23

-   Representa las distribuciones previa y posterior de la media; considera un eje que cubra 4 desviaciones típicas a cada lado de la media de la distribución previa. Obten el estimador esperado y modal a partir de esta distribución y compáralos con la solución analítica de la pregunta anterior.

::: {#respuesta-23 .callout-note}
```{r dist previay post}
#library(ggplot2)

# Parámetros de la distribución previa
mu_previa <- 247
var_previa <- 1156
sd_previa <- sqrt(var_previa)

# Distribución previa: media y desviación típica
x_previa <- seq(mu_previa - 4 * sd_previa, mu_previa + 4 * sd_previa, length.out = 500)
y_previa <- dnorm(x_previa, mean = mu_previa, sd = sd_previa)

# Parámetros de la distribución posterior
clase_1 <- c(
  242, 249, 278, 273, 227, 257, 276, 236, 214, 141, 200, 201, 
  228, 271, 160, 275, 156, 246, 293, 306, 263, 247, 224, 160, 277, 
  168, 250
)

clase_2 <- c(
  195, 176, 237, 258, 226, 254, 292, 212, 215, 298, 235, 244, 
  144, 227, 166, 194, 261, 187, 224, 233, 180, 167, 193, 282
)
datos <- c(clase_1, clase_2)
media_muestral <- mean(datos)
varianza_muestral <- var(datos)
sd_muestral <- sqrt(varianza_muestral)

n <- length(datos)

var_posterior <- 1 / (1 / var_previa + n / varianza_muestral)
mu_posterior <- var_posterior * (mu_previa / var_previa + n * media_muestral / varianza_muestral)
sd_posterior <- sqrt(var_posterior)

# Distribución posterior: media y desviación típica
x_posterior <- seq(mu_posterior - 4 * sd_posterior, mu_posterior + 4 * sd_posterior, length.out = 500)
y_posterior <- dnorm(x_posterior, mean = mu_posterior, sd = sd_posterior)

# Graficar las distribuciones previa y posterior
df <- data.frame(
  x = c(x_previa, x_posterior),
  y = c(y_previa, y_posterior),
  tipo = c(rep("Previa", length(x_previa)), rep("Posterior", length(x_posterior)))
  )
ggplot(df, aes(x = x, y = y, color = tipo)) +
  geom_line(size = 1) +
  labs(
    title = "Distribuciones Previa y Posterior de la Media",
    x = "Media",
    y = "Densidad"
  ) +
  theme_minimal() +
  scale_color_manual(values = c("blue", "red"))

```

:::
